" Someone said that this should be the first line in thew vimrc,
" because this can change the other setting behavior as a side effect.
set nocompatible

" Auto install on the first time if there no plug.vim found --------------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Enable gnome-terminal full color
set t_Co=256

" This script defines list of the plugins will be managed by plug.vim
source ~/.vim/custom/plugins.vim

" Some of my custom fucntions
source ~/.vim/custom/funcs.vim

" This script have come custom for the NERDTree plugin.
" Includes:
" - Shortcut to open NERDTree panel
" - Shortcut to reveal current buffer location on disk
" - Command to highlight by file extension
source ~/.vim/custom/nerdtree.vim

" Use space as Leader key, it's easy to touch
let mapleader="\<SPACE>"

" Now we add the common settings
source ~/.vim/common.vim

" Automatic recognize flie syntax
syntax on
filetype plugin indent on

" Quickly open vimrc and apply change
nnoremap <Leader>es :tabedit $MYVIMRC<CR>
nnoremap <Leader>ep :tabedit ~/.vim/custom/plugins.vim<CR>
nnoremap <Leader>ss :tabedit ~/.vimrc_local<CR>
nnoremap <Leader>as :so $MYVIMRC<CR>


" Allow airline use powerline fonts
let g:airline_powerline_fonts=1

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Auto remove trailing white space on saving file
" -----------------------------------------------
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()


" Use markdown as default, actually, I'm still not use vim heavily for other
" languages, not yet.
au BufNewFile,BufRead *.txt  set ft=markdown
au BufNewFile * set ft=markdown

let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1

" Custom theme
colo hemisu

" Delete comment character when joining comnmented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

" Reload unchanged files automatically.
set autoread

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

if !empty(glob("~/.vimrc_local"))
    source ~/.vimrc_local
endif


let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_extensions = ['buffertag','tag', 'line', 'dir']

" Quickly format the paregraph, and also a way to avoid enter Ex-mode
nnoremap gQ gqap


" Make CtrlP uses regex as default
let g:ctrlp_regexp=1

" make use of the incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Date time inserting
"Tue 29 Mar 2016 09:07:43 AM ICT
:iab <expr> dtf strftime("%c")
:iab <expr> Dtf strftime("%c")
"2016-04-07
:iab <expr> dtd strftime("%Y-%m-%d")
:iab <expr> Dtd strftime("%Y-%m-%d")
"09:07:56
:iab <expr> dtt strftime("%T")
:iab <expr> Dtt strftime("%T")
" Need to make another variant that have first letter capitalized to use with
" the auto-capitalisation mode

"Set up for vimwiki
let g:vimwiki_list = [{'path': '$NOTE/vimwiki/'}]
nmap <Leader>dt o<CR><CR>dtt <ESC>=<<o-<SPACE>


" Save the file using Ctrl-S, this work in conjunction with disable Ctrl-S for
" Gnome temrinal
nmap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a

"------------------------------------------------------------------------------
" The following script is copied from (with modification to use with my setup)
" https://davidxmoody.com/vim-auto-capitalisation/
" This make vim capitalize the first letter of the sentence.
func! WordProcessorMode()
    " Auto-capitalize script
    augroup SENTENCES
        au!
        autocmd InsertCharPre * if search('\v(%^|[.!?]\_s+|\_^\-\s|\_^title\:\s|\n\n)%#', 'bcnw') != 0 | let v:char = toupper(v:char) | endif
    augroup END
endfu

com! WP call WordProcessorMode()
au BufNewFile,BufRead *.mkd call WordProcessorMode()
au BufNewFile,BufRead *.md call WordProcessorMode()
au BufNewFile,BufRead *.wiki call WordProcessorMode()
au BufNewFile,BufRead diary-*.txt call WordProcessorMode()
