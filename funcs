#!/bin/bash
# vim: syntax=sh tw=200:

# Some custom functions, and also the aliases for make them shorten when using.
# Because the functions is self-defined, their aliases should be kept here, not
# in the ~/.aliases file.

# Open the ebook from command line using zathura, this also make za an alias to
# zathura.
# Usage:
#   za [file_name]
# If file_name is not provided, simply open zathura.
za() {
  if [ $# -eq 0 ]; then
    (zathura &)
  else
    (zathura "$1" &)
  fi
}

# Add, commit and push in single call. For lazy people.
# Shouldn't use this on serious project. It's would pollute your git history!
lazygit() {
  if [ $# -eq 0 ]; then # Check for commit message
    echo "Need a commit message"
    return 1
  fi
  git add .
  git commit -a -m "$*"
  git push
}

alias lg="lazygit" # And even more lazy

# Some common alias for switching git branch, memo as gb (git branch)
alias gbm='git checkout master'
alias gbt='git checkout test'
alias gbu='git checkout uat'
# unalias gbs # I don't use git bisect yet
alias gbs='git checkout staging'

# Switch to the working branch
alias gbw=gb_work

fancy_echo() {
  echo "========================================"
  echo "- $*"
  echo "========================================"
}

# Update software
update_software() {

  #  Ubuntu
  if command -v apt-get >/dev/null 2>&1; then
    fancy_echo "Update software for Ubuntu"
    sudo apt update
    sudo apt full-upgrade -y
    sudo apt autoremove -y
  fi

  #  Centos
  if command -v yum >/dev/null 2>&1; then
    fancy_echo "Update software for Centos"
    sudo yum update -y
  fi

  if command -v brew >/dev/null 2>&1; then
    fancy_echo "Update software installed by homebrew"
    brew update
    brew upgrade
  fi

  #  Vim
  fancy_echo "Vim plugins"
  # Execute vim-plug upgrade, then update all plugins
  vim -c "PlugUpgrade" -c "qa!"
  vim -c "PlugUpdate" -c "qa!"
  vim -c "UpdateRemotePlugins" -c "qa!"

  # ensure zsh/kitty known about xterm-256color-italic
  tic "$DOTFILES/xterm-256color-italic.terminfo"
}

dkpg() {
  if command -v podman >/dev/null 2>&1; then
    cmd=podman
  else
    cmd=docker
  fi

  echo "> Starting postgres container using $cmd"
  $cmd run --rm -d --name dkpg -e POSTGRES_PASSWORD=123 -p 5432:5432 postgres
}

dkmy() {
  if command -v podman >/dev/null 2>&1; then
    cmd=podman
  else
    cmd=docker
  fi

  echo "> Starting mysql container using $cmd"
  $cmd run --rm -d --name dkmy -e MYSQL_ROOT_PASSWORD=123 -p 3306:3306 mysql
}

dkrd() {
  if command -v podman >/dev/null 2>&1; then
    cmd=podman
  else
    cmd=docker
  fi

  echo "> Starting redis container using $cmd"
  $cmd run --rm -d --name dkrd -p 6379:6379 redis
}

dkmg() {
  if command -v podman >/dev/null 2>&1; then
    cmd=podman
  else
    cmd=docker
  fi

  echo "> Starting mongo container using $cmd"
  $cmd run --rm -d --name dkmg -p 27017:27017 mongo
}

one_of() {
  list=("$@")
  one=${list[$RANDOM % ${#list[@]}]}
  echo "$one"
}

local_todo() {
  repo=$(git rev-parse --show-toplevel 2>/dev/null)
  if [[ -z $repo ]]; then
    echo "not a git repo"
    return
  fi

  mkdir -p "$repo"/.dump
  vim "$repo"/.dump/todo.md
}

# https://yazi-rs.github.io/docs/quick-start/#shell-wrapper
yazi_cd() {
  tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd" || exit
  fi
  rm -f -- "$tmp"
}

function killport() {
    local port=""
    local force_yes=false

    # Parse arguments in any order
    for arg in "$@"; do
        if [[ "$arg" == "-y" ]]; then
            force_yes=true
        elif [[ "$arg" =~ ^[0-9]+$ ]]; then
            port="$arg"
        fi
    done

    # Validate port argument
    if [[ -z "$port" ]]; then
        echo "Usage: killport [port] [-y] or killport [-y] [port]"
        return 1
    fi

    # Find processes using the port
    pids=$(lsof -i ":$port" -t 2>/dev/null)

    if [[ -z "$pids" ]]; then
        echo "No process found listening on port $port"
        return 1
    fi

    # Show all processes using this port
    echo "Found process(es) on port $port:"
    while IFS= read -r pid; do
        process_info=$(ps -p "$pid" -o pid,user,command | tail -n 1)
        echo "$process_info"
    done <<< "$pids"

    if [[ "$force_yes" == true ]]; then
        echo "Killing process(es)..."
        while IFS= read -r pid; do
            kill -9 "$pid"
        done <<< "$pids"
        echo "Process(es) killed"
    else
        echo -n "Do you want to kill these process(es)? (y/N) "
        read -r answer
        if [[ $answer =~ ^[Yy]$ ]]; then
            while IFS= read -r pid; do
                kill -9 "$pid"
            done <<< "$pids"
            echo "Process(es) killed"
        else
            echo "Operation cancelled"
        fi
    fi
}

