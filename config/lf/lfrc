set icons
set hidden
set info size:time

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner

# map i $bat --theme=base16 --paging=always --style=changes
map i $bat --paging=always "$f" && clear
map <enter> open

map D trash $fx

cmd trash ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/N]: "
    read ans
    [ "$ans" = "y" ] && trash $fx
}}


cmd open ${{
  case $(file --mime-type "$f" -b) in
    inode/x-empty) $EDITOR $f;;
    text/*) $EDITOR $f;;
    audio/mpeg) mpv $f;;
    video/*) mpv $f > /dev/null 2>&1 & ;;
          *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd fzf_jump ${{
    res="$(fd | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

map gd :cd ~/Downloads
map gt :cd ~/temp
map gm :cd ~/Project/mine
map gb :cd ~/Project/mine/books

# move to next/prev sibling dir
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open

# open explorer in current directory
map O !open .

# Edit and reload config
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}
map .c edit-config

# create new files and dirs
map a push %touch<space>
map A push %mkdir<space>-p<space>
